syntax = "proto3";
option go_package = "raft";

message LogEntry {
    int64  Index       = 1;
    int64  Term        = 2;
    string  CommandName = 3;
    bytes   Command     = 4;
}

message AppendEntriesReq{
    int64   Term              = 1; // 领导人任期号
    string   LeaderName        = 2; // 领导人的 Id，以便于跟随者重定向请求
    int64   PrevLogIndex      = 3; // 新的日志条目紧随之前的索引值
    int64   PrevLogTerm       = 4; // prevLogIndex 条目的任期号
    int64   LeaderCommit      = 5; // 领导人已经提交的日志的索引值
    repeated LogEntry Entries  = 6; // 准备存储的日志条目（表示心跳时为空；一次性发送多个是为了提高效率）
}

message  AppendEntriesResp {
    int64 Term        = 1; // 任期号，用于领导人更新自己
    int64 Index       = 2;
    int64 CommitIndex = 3;
    bool   Success     = 4; // 如果其他节点能匹配上 PrevLogIndex，PrevLogTerm 为 true；
}

message RequestVoteReq {
    int64 Term          = 1; // 候选人的任期号
    int64 LastLogIndex  = 2; // 候选人最新日志条目索引
    int64 LastLogTerm   = 3; // 候选人最新日志条目对应的任期号
    string CandidateName = 4; // 请求投票的候选人
}

message RequestVoteResp {
    int64 Term        = 1; // 任期号，用于候选人更新自己
    bool   VoteGranted = 2; // 如果候选人收到选票，true。
}

message SnapshotReq {
    string LeaderName  = 1;
    int64 LastIndex   = 2;
    int64 LastTerm    = 3;
}

message SnapshotResp {
    bool Success = 1;
}