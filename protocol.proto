syntax = "proto3";
option go_package = "raft";

message LogEntry {
    uint64  Index       = 1;
    uint64  Term        = 2;
    string  CommandName = 3;
    bytes   Command     = 4;
}

/*
1. Reply false if term < currentTerm (§5.1)
2. Reply false if log doesn’t contain an entry at prevLogIndex whose term matches prevLogTerm (§5.3)
3. If an existing entry conflicts with a new one (same index but different terms), delete the existing entry and all that follow it (§5.3)
4. Append any new entries not already in the log
5. If leaderCommit > commitIndex, set commitIndex = min(leaderCommit, index of last new entry)
*/

message AppendEntriesReq{
    uint64   Term              = 1; // 领导人任期号
    string   LeaderName        = 2; // 领导人，为其他节点能重定向到客户端
    uint64   PrevLogIndex      = 3; // 最新日志索引
    uint64   PrevLogTerm       = 4; // 最新日志领导人任期号
    uint64   LeaderCommit      = 5; // 领导人提交的日志索引
    repeated LogEntry Entries  = 6; // 将要存储的日志条目（表示heartbeat时为空）
}

message  AppendEntriesResp {
    uint64 Term        = 1; // 任期号，用于领导人更新自己
    uint64 Index       = 2;
    uint64 CommitIndex = 3;
    bool   Success     = 4; // 如果其他节点能匹配上 PrevLogIndex，PrevLogTerm 为 true；
}

/*
1. Reply false if term < currentTerm (§5.1)
2. If votedFor is null or candidateId, and candidate’s log is at least as up-to-date as receiver’s log, grant vote (§5.2, §5.4)
*/

message RequestVoteReq {
    uint64 Term          = 1; // 候选人的任期号
    uint64 LastLogIndex  = 2; // 候选人最新日志条目索引
    uint64 LastLogTerm   = 3; // 候选人最新日志条目对应的任期号
    string CandidateName = 4; // 请求投票的候选人
}

message RequestVoteResp {
    uint64 Term        = 1; // 任期号，用于候选人更新自己
    bool   VoteGranted = 2; // 如果候选人收到选票，true。
}



message SnapshotReq {
    string LeaderName  = 1;
    uint64 LastIndex   = 2;
    uint64 LastTerm    = 3;
}

message SnapshotResp {
    bool Success = 1;
}